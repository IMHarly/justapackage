})
DATA.print <- do.call(rbind, DATA.print)
DATA.print <- cbind.data.frame("minD0" = minD0, DATA.print)
DATA.print <- cbind.data.frame(DATA.print, "method" = method)
colnames(DATA.print)[2:3] <- c("de", "de.error")
DATA <- na.omit(DATA.print)
above <- DATA$de > DATA$minD0
if(sum(abs(diff(above))) == 0) {
intersect.results <- data.frame("intersect" = 0, "x-coordinates" = 0, "x-error" = 0, "y-coordinates" = 0, "y-error" = 0)
intersect.x = 0
intersect.y = 0
intersect.points.start = NULL
intersect.points.end = NULL
segment_data <- data.frame(
"x" = 0,
"xend" = 2,
"y" = 2,
"yend" = 2
)
ggplotlist <- list()
} else {
intersect.points.start <- which(diff(above) != 0)
intersect.points.end <- intersect.points.start+1
slopes <- (DATA$de[intersect.points.end] - DATA$de[intersect.points.start]) / (DATA$minD0[intersect.points.end] - DATA$minD0[intersect.points.start])
yintercepts <- DATA$de[intersect.points.end]-slopes*DATA$minD0[intersect.points.end]
intersect.x = (yintercepts-0) / (1-slopes)
intersect.y = yintercepts + intersect.x*slopes
segment_data <- data.frame(
"x" = 0,
"xend" = intersect.x,
"y" = intersect.x,
"yend" = intersect.x
)
x1 = DATA$minD0[intersect.points.start]
x2 = DATA$minD0[intersect.points.end]
y1 = DATA$de[intersect.points.start]
y2 = DATA$de[intersect.points.end]
dy1 = -(( (x2-x1)*(y2-x2) ) / (y1-y2+x2-x1)^2)
dy2 = ( (x2-x1)*(y1-x1) ) / (y2-y1-x2+x1)^2
dx = abs(dy1*DATA$de.error[intersect.points.start]) + abs(dy2*DATA$de.error[intersect.points.end])
intersect.results <- data.frame("intersect" = 1:length(intersect.x), "x.y.coordinate" = intersect.x, "error" = dx)
ggplotlist <- list(geom_segment(data = segment_data, aes(x = x, xend = xend, y = y, yend = yend), linetype = "dashed", color = "red"),
geom_segment(data = segment_data, aes(x = xend, xend = xend, y = x, yend = yend), linetype = "dashed", color  = "red"),
geom_segment(data = segment_data, aes(x = DATA$minD0[intersect.points.start], xend = DATA$minD0[intersect.points.end], y = DATA$de[intersect.points.start], yend = DATA$de[intersect.points.end]), linetype = "dashed"))
}
legenddata <- data.frame("label" = c("CAM", "1to1 line", "Regression line", "intersect line"), "dummyx" = 0, "dummyy" = 0)
suppressMessages(
p <- ggplot(DATA, aes(x = minD0, y = de)) + geom_point(size = 3, shape = 23, fill = "black") + geom_errorbar(aes(ymin = de-de.error, ymax = de+de.error, width = 0.1*max(de))) + xlim(0, max(DATA$de)*2) + ylim(0, max(minD0)*2) + scale_x_continuous(breaks = minD0) +
ggplotlist +
geom_abline(size = 0.2) + theme_classic() +
ylab(bquote("D"["e"])) + xlab("D0 threshold") +
geom_line(data = legenddata, aes(x = dummyx, y = dummyy, color = label, linetype = label)) + scale_linetype_manual(values = c("solid", "blank","dashed", "dashed")) + scale_color_manual(values = c("black", "black", "red", "black")) +
geom_point(data = legenddata, aes(x = DATA$minD0[1], y = DATA$de[1], alpha = label), shape = 23, size = 3, fill = "black") + scale_alpha_manual(values = c(0,1,0,0)) +
theme(legend.position = c(1, 1), legend.justification = c(1,1), legend.title = element_blank())
)
cat("\n----------------------------------------------------------------------------------\n")
cat(">> Results << ")
cat("\n----------------------------------------------------------------------------------\n")
print.data.frame(DATA.print, print.gap = 2, digits = 4, row.names = F)
cat("\n----------------------------------------------------------------------------------\n")
cat(">> intersects << ")
cat("\n----------------------------------------------------------------------------------\n")
print.data.frame(intersect.results, row.names = F)
if(sum(abs(diff(above))) == 0) print("I could not find any intersects")
suppressMessages (print(p))
return(list(DATA.print, intersect.results))
}
cam_per_d0(OSLdata[, c("ED", "ED_Err", "Param2")], minD0 = seq(200, 400, 50), method = "ADM", sigma_m = 0.17)
... =
cam_per_d0 <- function(data, minD0, method = "CAM", De = 1, De.error = 2, ...) {
argg <- c(as.list(environment()), list(...))
print(argg)
unsatDATA <- data[my_complete_cases(data[, c(De, De.error, D0)]), ]
satDATA <- data[!my_complete_cases(data[, c(De, De.error)]), ]
satDATA <- satDATA[!is.na(satDATA[, D0]), ]
minD0 <- minD0[minD0 <= max(unsatDATA[, D0])]
DATA.print <- lapply(minD0, function(x) {
unsatDATA.tmp <- unsatDATA[unsatDATA[, D0] >= x,]
n <- nrow(unsatDATA.tmp)
nsaturated <- nrow(satDATA[satDATA[, D0] >= x, ])
if(nrow(unsatDATA.tmp) > 1 & x < max(unsatDATA[, D0])) {
if(method == "CAM")
DATA.tmp <- get_RLum(calc_CentralDose(
unsatDATA.tmp[, c(De, De.error)],
plot = FALSE,
verbose = FALSE,
...))[1:4]
if(method == "ADM")
DATA.tmp <- get_RLum(calc_AverageDose(
unsatDATA.tmp[, c(De, De.error)],
plot = F,
verbose = F,
...))[1:2]
DATA.tmp <- as.data.frame(DATA.tmp)
DATA.tmp <- cbind.data.frame(DATA.tmp, "n" = n, "nsaturated" = nsaturated, "nsaturatedPROP" = nsaturated/(nsaturated+n))
} else {DATA.tmp <- NA
warning("Some D0 thresholds contain less than two observations and cannot be evaluated")}
return(DATA.tmp)
})
DATA.print <- do.call(rbind, DATA.print)
DATA.print <- cbind.data.frame("minD0" = minD0, DATA.print)
DATA.print <- cbind.data.frame(DATA.print, "method" = method)
colnames(DATA.print)[2:3] <- c("de", "de.error")
DATA <- na.omit(DATA.print)
above <- DATA$de > DATA$minD0
if(sum(abs(diff(above))) == 0) {
intersect.results <- data.frame("intersect" = 0, "x-coordinates" = 0, "x-error" = 0, "y-coordinates" = 0, "y-error" = 0)
intersect.x = 0
intersect.y = 0
intersect.points.start = NULL
intersect.points.end = NULL
segment_data <- data.frame(
"x" = 0,
"xend" = 2,
"y" = 2,
"yend" = 2
)
ggplotlist <- list()
} else {
intersect.points.start <- which(diff(above) != 0)
intersect.points.end <- intersect.points.start+1
slopes <- (DATA$de[intersect.points.end] - DATA$de[intersect.points.start]) / (DATA$minD0[intersect.points.end] - DATA$minD0[intersect.points.start])
yintercepts <- DATA$de[intersect.points.end]-slopes*DATA$minD0[intersect.points.end]
intersect.x = (yintercepts-0) / (1-slopes)
intersect.y = yintercepts + intersect.x*slopes
segment_data <- data.frame(
"x" = 0,
"xend" = intersect.x,
"y" = intersect.x,
"yend" = intersect.x
)
x1 = DATA$minD0[intersect.points.start]
x2 = DATA$minD0[intersect.points.end]
y1 = DATA$de[intersect.points.start]
y2 = DATA$de[intersect.points.end]
dy1 = -(( (x2-x1)*(y2-x2) ) / (y1-y2+x2-x1)^2)
dy2 = ( (x2-x1)*(y1-x1) ) / (y2-y1-x2+x1)^2
dx = abs(dy1*DATA$de.error[intersect.points.start]) + abs(dy2*DATA$de.error[intersect.points.end])
intersect.results <- data.frame("intersect" = 1:length(intersect.x), "x.y.coordinate" = intersect.x, "error" = dx)
ggplotlist <- list(geom_segment(data = segment_data, aes(x = x, xend = xend, y = y, yend = yend), linetype = "dashed", color = "red"),
geom_segment(data = segment_data, aes(x = xend, xend = xend, y = x, yend = yend), linetype = "dashed", color  = "red"),
geom_segment(data = segment_data, aes(x = DATA$minD0[intersect.points.start], xend = DATA$minD0[intersect.points.end], y = DATA$de[intersect.points.start], yend = DATA$de[intersect.points.end]), linetype = "dashed"))
}
legenddata <- data.frame("label" = c("CAM", "1to1 line", "Regression line", "intersect line"), "dummyx" = 0, "dummyy" = 0)
suppressMessages(
p <- ggplot(DATA, aes(x = minD0, y = de)) + geom_point(size = 3, shape = 23, fill = "black") + geom_errorbar(aes(ymin = de-de.error, ymax = de+de.error, width = 0.1*max(de))) + xlim(0, max(DATA$de)*2) + ylim(0, max(minD0)*2) + scale_x_continuous(breaks = minD0) +
ggplotlist +
geom_abline(size = 0.2) + theme_classic() +
ylab(bquote("D"["e"])) + xlab("D0 threshold") +
geom_line(data = legenddata, aes(x = dummyx, y = dummyy, color = label, linetype = label)) + scale_linetype_manual(values = c("solid", "blank","dashed", "dashed")) + scale_color_manual(values = c("black", "black", "red", "black")) +
geom_point(data = legenddata, aes(x = DATA$minD0[1], y = DATA$de[1], alpha = label), shape = 23, size = 3, fill = "black") + scale_alpha_manual(values = c(0,1,0,0)) +
theme(legend.position = c(1, 1), legend.justification = c(1,1), legend.title = element_blank())
)
cat("\n----------------------------------------------------------------------------------\n")
cat(">> Results << ")
cat("\n----------------------------------------------------------------------------------\n")
print.data.frame(DATA.print, print.gap = 2, digits = 4, row.names = F)
cat("\n----------------------------------------------------------------------------------\n")
cat(">> intersects << ")
cat("\n----------------------------------------------------------------------------------\n")
print.data.frame(intersect.results, row.names = F)
if(sum(abs(diff(above))) == 0) print("I could not find any intersects")
suppressMessages (print(p))
return(list(DATA.print, intersect.results))
}
cam_per_d0(OSLdata[, c("ED", "ED_Err", "Param2")], minD0 = seq(200, 400, 50), method = "ADM", sigma_m = 0.17)
... =
cam_per_d0 <- function(data, minD0, method = "CAM", De = 1, De.error = 2, ...) {
argg <- c(as.list(environment()), list(...))
unsatDATA <- data[my_complete_cases(data[, c(De, De.error, D0)]), ]
satDATA <- data[!my_complete_cases(data[, c(De, De.error)]), ]
satDATA <- satDATA[!is.na(satDATA[, D0]), ]
minD0 <- minD0[minD0 <= max(unsatDATA[, D0])]
DATA.print <- lapply(minD0, function(x) {
unsatDATA.tmp <- unsatDATA[unsatDATA[, D0] >= x,]
n <- nrow(unsatDATA.tmp)
nsaturated <- nrow(satDATA[satDATA[, D0] >= x, ])
if(nrow(unsatDATA.tmp) > 1 & x < max(unsatDATA[, D0])) {
if(method == "CAM")
DATA.tmp <- get_RLum(calc_CentralDose(
unsatDATA.tmp[, c(De, De.error)],
plot = FALSE,
verbose = FALSE,
...))[1:4]
if(method == "ADM")
DATA.tmp <- get_RLum(calc_AverageDose(
unsatDATA.tmp[, c(De, De.error)],
plot = F,
verbose = F,
...))[1:2]
DATA.tmp <- as.data.frame(DATA.tmp)
DATA.tmp <- cbind.data.frame(DATA.tmp, "n" = n, "nsaturated" = nsaturated, "nsaturatedPROP" = nsaturated/(nsaturated+n))
} else {DATA.tmp <- NA
warning("Some D0 thresholds contain less than two observations and cannot be evaluated")}
return(DATA.tmp)
})
DATA.print <- do.call(rbind, DATA.print)
DATA.print <- cbind.data.frame("minD0" = minD0, DATA.print)
DATA.print <- cbind.data.frame(DATA.print, "method" = method)
colnames(DATA.print)[2:3] <- c("de", "de.error")
DATA <- na.omit(DATA.print)
above <- DATA$de > DATA$minD0
if(sum(abs(diff(above))) == 0) {
intersect.results <- data.frame("intersect" = 0, "x-coordinates" = 0, "x-error" = 0, "y-coordinates" = 0, "y-error" = 0)
intersect.x = 0
intersect.y = 0
intersect.points.start = NULL
intersect.points.end = NULL
segment_data <- data.frame(
"x" = 0,
"xend" = 2,
"y" = 2,
"yend" = 2
)
ggplotlist <- list()
} else {
intersect.points.start <- which(diff(above) != 0)
intersect.points.end <- intersect.points.start+1
slopes <- (DATA$de[intersect.points.end] - DATA$de[intersect.points.start]) / (DATA$minD0[intersect.points.end] - DATA$minD0[intersect.points.start])
yintercepts <- DATA$de[intersect.points.end]-slopes*DATA$minD0[intersect.points.end]
intersect.x = (yintercepts-0) / (1-slopes)
intersect.y = yintercepts + intersect.x*slopes
segment_data <- data.frame(
"x" = 0,
"xend" = intersect.x,
"y" = intersect.x,
"yend" = intersect.x
)
x1 = DATA$minD0[intersect.points.start]
x2 = DATA$minD0[intersect.points.end]
y1 = DATA$de[intersect.points.start]
y2 = DATA$de[intersect.points.end]
dy1 = -(( (x2-x1)*(y2-x2) ) / (y1-y2+x2-x1)^2)
dy2 = ( (x2-x1)*(y1-x1) ) / (y2-y1-x2+x1)^2
dx = abs(dy1*DATA$de.error[intersect.points.start]) + abs(dy2*DATA$de.error[intersect.points.end])
intersect.results <- data.frame("intersect" = 1:length(intersect.x), "x.y.coordinate" = intersect.x, "error" = dx)
ggplotlist <- list(geom_segment(data = segment_data, aes(x = x, xend = xend, y = y, yend = yend), linetype = "dashed", color = "red"),
geom_segment(data = segment_data, aes(x = xend, xend = xend, y = x, yend = yend), linetype = "dashed", color  = "red"),
geom_segment(data = segment_data, aes(x = DATA$minD0[intersect.points.start], xend = DATA$minD0[intersect.points.end], y = DATA$de[intersect.points.start], yend = DATA$de[intersect.points.end]), linetype = "dashed"))
}
legenddata <- data.frame("label" = c("CAM", "1to1 line", "Regression line", "intersect line"), "dummyx" = 0, "dummyy" = 0)
suppressMessages(
p <- ggplot(DATA, aes(x = minD0, y = de)) + geom_point(size = 3, shape = 23, fill = "black") + geom_errorbar(aes(ymin = de-de.error, ymax = de+de.error, width = 0.1*max(de))) + xlim(0, max(DATA$de)*2) + ylim(0, max(minD0)*2) + scale_x_continuous(breaks = minD0) +
ggplotlist +
geom_abline(size = 0.2) + theme_classic() +
ylab(bquote("D"["e"])) + xlab("D0 threshold") +
geom_line(data = legenddata, aes(x = dummyx, y = dummyy, color = label, linetype = label)) + scale_linetype_manual(values = c("solid", "blank","dashed", "dashed")) + scale_color_manual(values = c("black", "black", "red", "black")) +
geom_point(data = legenddata, aes(x = DATA$minD0[1], y = DATA$de[1], alpha = label), shape = 23, size = 3, fill = "black") + scale_alpha_manual(values = c(0,1,0,0)) +
theme(legend.position = c(1, 1), legend.justification = c(1,1), legend.title = element_blank())
)
cat("\n----------------------------------------------------------------------------------\n")
cat(">> Results << ")
cat("\n----------------------------------------------------------------------------------\n")
print.data.frame(DATA.print, print.gap = 2, digits = 4, row.names = F)
cat("\n----------------------------------------------------------------------------------\n")
cat(">> intersects << ")
cat("\n----------------------------------------------------------------------------------\n")
print.data.frame(intersect.results, row.names = F)
if(sum(abs(diff(above))) == 0) print("I could not find any intersects")
suppressMessages (print(p))
return(argg)
}
cam_per_d0(OSLdata[, c("ED", "ED_Err", "Param2")], minD0 = seq(200, 400, 50), method = "ADM", sigma_m = 0.17)
argg <- cam_per_d0(OSLdata[, c("ED", "ED_Err", "Param2")], minD0 = seq(200, 400, 50), method = "ADM", sigma_m = 0.17)
class(argg)
class(argg$minD0)
length(argg)
length(argg[[]])
... =
cam_per_d0 <- function(data, minD0, method = "CAM", ...) {
argg <- c(as.list(environment()), list(...))
colnames(data) <- c("De", "De.error", "D0")
unsatDATA <- data[my_complete_cases(data[, c(De, De.error, D0)]), ]
satDATA <- data[!my_complete_cases(data[, c(De, De.error)]), ]
satDATA <- satDATA[!is.na(satDATA[, D0]), ]
minD0 <- minD0[minD0 <= max(unsatDATA[, D0])]
DATA.print <- lapply(minD0, function(x) {
unsatDATA.tmp <- unsatDATA[unsatDATA[, D0] >= x,]
n <- nrow(unsatDATA.tmp)
nsaturated <- nrow(satDATA[satDATA[, D0] >= x, ])
if(nrow(unsatDATA.tmp) > 1 & x < max(unsatDATA[, D0])) {
if(method == "CAM")
DATA.tmp <- get_RLum(calc_CentralDose(
unsatDATA.tmp[, c(De, De.error)],
plot = FALSE,
verbose = FALSE,
...))[1:4]
if(method == "ADM")
DATA.tmp <- get_RLum(calc_AverageDose(
unsatDATA.tmp[, c(De, De.error)],
plot = F,
verbose = F,
...))[1:2]
DATA.tmp <- as.data.frame(DATA.tmp)
DATA.tmp <- cbind.data.frame(DATA.tmp, "n" = n, "nsaturated" = nsaturated, "nsaturatedPROP" = nsaturated/(nsaturated+n))
} else {DATA.tmp <- NA
warning("Some D0 thresholds contain less than two observations and cannot be evaluated")}
return(DATA.tmp)
})
DATA.print <- do.call(rbind, DATA.print)
DATA.print <- cbind.data.frame("minD0" = minD0, DATA.print)
DATA.print <- cbind.data.frame(DATA.print, "method" = method)
colnames(DATA.print)[2:3] <- c("de", "de.error")
DATA <- na.omit(DATA.print)
above <- DATA$de > DATA$minD0
if(sum(abs(diff(above))) == 0) {
intersect.results <- data.frame("intersect" = 0, "x-coordinates" = 0, "x-error" = 0, "y-coordinates" = 0, "y-error" = 0)
intersect.x = 0
intersect.y = 0
intersect.points.start = NULL
intersect.points.end = NULL
segment_data <- data.frame(
"x" = 0,
"xend" = 2,
"y" = 2,
"yend" = 2
)
ggplotlist <- list()
} else {
intersect.points.start <- which(diff(above) != 0)
intersect.points.end <- intersect.points.start+1
slopes <- (DATA$de[intersect.points.end] - DATA$de[intersect.points.start]) / (DATA$minD0[intersect.points.end] - DATA$minD0[intersect.points.start])
yintercepts <- DATA$de[intersect.points.end]-slopes*DATA$minD0[intersect.points.end]
intersect.x = (yintercepts-0) / (1-slopes)
intersect.y = yintercepts + intersect.x*slopes
segment_data <- data.frame(
"x" = 0,
"xend" = intersect.x,
"y" = intersect.x,
"yend" = intersect.x
)
x1 = DATA$minD0[intersect.points.start]
x2 = DATA$minD0[intersect.points.end]
y1 = DATA$de[intersect.points.start]
y2 = DATA$de[intersect.points.end]
dy1 = -(( (x2-x1)*(y2-x2) ) / (y1-y2+x2-x1)^2)
dy2 = ( (x2-x1)*(y1-x1) ) / (y2-y1-x2+x1)^2
dx = abs(dy1*DATA$de.error[intersect.points.start]) + abs(dy2*DATA$de.error[intersect.points.end])
intersect.results <- data.frame("intersect" = 1:length(intersect.x), "x.y.coordinate" = intersect.x, "error" = dx)
ggplotlist <- list(geom_segment(data = segment_data, aes(x = x, xend = xend, y = y, yend = yend), linetype = "dashed", color = "red"),
geom_segment(data = segment_data, aes(x = xend, xend = xend, y = x, yend = yend), linetype = "dashed", color  = "red"),
geom_segment(data = segment_data, aes(x = DATA$minD0[intersect.points.start], xend = DATA$minD0[intersect.points.end], y = DATA$de[intersect.points.start], yend = DATA$de[intersect.points.end]), linetype = "dashed"))
}
legenddata <- data.frame("label" = c("CAM", "1to1 line", "Regression line", "intersect line"), "dummyx" = 0, "dummyy" = 0)
suppressMessages(
p <- ggplot(DATA, aes(x = minD0, y = de)) + geom_point(size = 3, shape = 23, fill = "black") + geom_errorbar(aes(ymin = de-de.error, ymax = de+de.error, width = 0.1*max(de))) + xlim(0, max(DATA$de)*2) + ylim(0, max(minD0)*2) + scale_x_continuous(breaks = minD0) +
ggplotlist +
geom_abline(size = 0.2) + theme_classic() +
ylab(bquote("D"["e"])) + xlab("D0 threshold") +
geom_line(data = legenddata, aes(x = dummyx, y = dummyy, color = label, linetype = label)) + scale_linetype_manual(values = c("solid", "blank","dashed", "dashed")) + scale_color_manual(values = c("black", "black", "red", "black")) +
geom_point(data = legenddata, aes(x = DATA$minD0[1], y = DATA$de[1], alpha = label), shape = 23, size = 3, fill = "black") + scale_alpha_manual(values = c(0,1,0,0)) +
theme(legend.position = c(1, 1), legend.justification = c(1,1), legend.title = element_blank())
)
cat("\n----------------------------------------------------------------------------------\n")
cat(">> Results << ")
cat("\n----------------------------------------------------------------------------------\n")
print.data.frame(DATA.print, print.gap = 2, digits = 4, row.names = F)
cat("\n----------------------------------------------------------------------------------\n")
cat(">> intersects << ")
cat("\n----------------------------------------------------------------------------------\n")
print.data.frame(intersect.results, row.names = F)
if(sum(abs(diff(above))) == 0) print("I could not find any intersects")
suppressMessages (print(p))
return(list(DATA.print, intersect.results))
}
saveRDS(argg, "argg.rds")
cam_per_d0(OSLdata[, c("ED", "ED_Err", "Param2")], minD0 = seq(200, 400, 50), method = "ADM", sigma_m = 0.17)
argg
do.call(argg, cbind)
do.call(argg, list)
do.call(cbind, argg)
args <- sapply(1:length(argg), function(x){
if(argg[[x]] == 1) return(argg[[x]])
})
args
args <- sapply(1:length(argg), function(x){
if(argg[[x]] == 1) argg[[x]]
})
args <- sapply(1:length(argg), function(x){
if(length(argg[[x]]) == 1) argg[[x]]
})
args
argg[[1]]
argg[[3]]
args <- sapply(1:length(argg), function(x){
if(length(argg[[x]]) == 1) c(colname(argg[[x]]), argg[[x]])
})
args <- sapply(1:length(argg), function(x){
if(length(argg[[x]]) == 1) c(colnames(argg[[x]]), argg[[x]])
})
args
argg$minD0
names(argg$minD0)
colnames(argg$minD0)
vectornames(argg$minD0)
lengths(argg)
lengths(argg) == 1
argg[[lengths(argg) == 1]]
argg[lengths(argg) == 1]
do.call(cbind, argg[lengths(argg) == 1])
... =
cam_per_d0 <- function(data, minD0, method = "CAM", ...) {
argg <- c(as.list(environment()), list(...))
argg <- do.call(cbind, argg[lengths(argg) == 1])
colnames(data) <- c("De", "De.error", "D0")
unsatDATA <- data[my_complete_cases(data[, c(De, De.error, D0)]), ]
satDATA <- data[!my_complete_cases(data[, c(De, De.error)]), ]
satDATA <- satDATA[!is.na(satDATA[, D0]), ]
minD0 <- minD0[minD0 <= max(unsatDATA[, D0])]
DATA.print <- lapply(minD0, function(x) {
unsatDATA.tmp <- unsatDATA[unsatDATA[, D0] >= x,]
n <- nrow(unsatDATA.tmp)
nsaturated <- nrow(satDATA[satDATA[, D0] >= x, ])
if(nrow(unsatDATA.tmp) > 1 & x < max(unsatDATA[, D0])) {
if(method == "CAM")
DATA.tmp <- get_RLum(calc_CentralDose(
unsatDATA.tmp[, c(De, De.error)],
plot = FALSE,
verbose = FALSE,
...))[1:4]
if(method == "ADM")
DATA.tmp <- get_RLum(calc_AverageDose(
unsatDATA.tmp[, c(De, De.error)],
plot = F,
verbose = F,
...))[1:2]
DATA.tmp <- as.data.frame(DATA.tmp)
DATA.tmp <- cbind.data.frame(DATA.tmp, "n" = n, "nsaturated" = nsaturated, "nsaturatedPROP" = nsaturated/(nsaturated+n), argg)
} else {DATA.tmp <- NA
warning("Some D0 thresholds contain less than two observations and cannot be evaluated")}
return(DATA.tmp)
})
DATA.print <- do.call(rbind, DATA.print)
DATA.print <- cbind.data.frame("minD0" = minD0, DATA.print)
colnames(DATA.print)[2:3] <- c("de", "de.error")
DATA <- na.omit(DATA.print)
above <- DATA$de > DATA$minD0
if(sum(abs(diff(above))) == 0) {
intersect.results <- data.frame("intersect" = 0, "x-coordinates" = 0, "x-error" = 0, "y-coordinates" = 0, "y-error" = 0)
intersect.x = 0
intersect.y = 0
intersect.points.start = NULL
intersect.points.end = NULL
segment_data <- data.frame(
"x" = 0,
"xend" = 2,
"y" = 2,
"yend" = 2
)
ggplotlist <- list()
} else {
intersect.points.start <- which(diff(above) != 0)
intersect.points.end <- intersect.points.start+1
slopes <- (DATA$de[intersect.points.end] - DATA$de[intersect.points.start]) / (DATA$minD0[intersect.points.end] - DATA$minD0[intersect.points.start])
yintercepts <- DATA$de[intersect.points.end]-slopes*DATA$minD0[intersect.points.end]
intersect.x = (yintercepts-0) / (1-slopes)
intersect.y = yintercepts + intersect.x*slopes
segment_data <- data.frame(
"x" = 0,
"xend" = intersect.x,
"y" = intersect.x,
"yend" = intersect.x
)
x1 = DATA$minD0[intersect.points.start]
x2 = DATA$minD0[intersect.points.end]
y1 = DATA$de[intersect.points.start]
y2 = DATA$de[intersect.points.end]
dy1 = -(( (x2-x1)*(y2-x2) ) / (y1-y2+x2-x1)^2)
dy2 = ( (x2-x1)*(y1-x1) ) / (y2-y1-x2+x1)^2
dx = abs(dy1*DATA$de.error[intersect.points.start]) + abs(dy2*DATA$de.error[intersect.points.end])
intersect.results <- data.frame("intersect" = 1:length(intersect.x), "x.y.coordinate" = intersect.x, "error" = dx)
ggplotlist <- list(geom_segment(data = segment_data, aes(x = x, xend = xend, y = y, yend = yend), linetype = "dashed", color = "red"),
geom_segment(data = segment_data, aes(x = xend, xend = xend, y = x, yend = yend), linetype = "dashed", color  = "red"),
geom_segment(data = segment_data, aes(x = DATA$minD0[intersect.points.start], xend = DATA$minD0[intersect.points.end], y = DATA$de[intersect.points.start], yend = DATA$de[intersect.points.end]), linetype = "dashed"))
}
legenddata <- data.frame("label" = c("CAM", "1to1 line", "Regression line", "intersect line"), "dummyx" = 0, "dummyy" = 0)
suppressMessages(
p <- ggplot(DATA, aes(x = minD0, y = de)) + geom_point(size = 3, shape = 23, fill = "black") + geom_errorbar(aes(ymin = de-de.error, ymax = de+de.error, width = 0.1*max(de))) + xlim(0, max(DATA$de)*2) + ylim(0, max(minD0)*2) + scale_x_continuous(breaks = minD0) +
ggplotlist +
geom_abline(size = 0.2) + theme_classic() +
ylab(bquote("D"["e"])) + xlab("D0 threshold") +
geom_line(data = legenddata, aes(x = dummyx, y = dummyy, color = label, linetype = label)) + scale_linetype_manual(values = c("solid", "blank","dashed", "dashed")) + scale_color_manual(values = c("black", "black", "red", "black")) +
geom_point(data = legenddata, aes(x = DATA$minD0[1], y = DATA$de[1], alpha = label), shape = 23, size = 3, fill = "black") + scale_alpha_manual(values = c(0,1,0,0)) +
theme(legend.position = c(1, 1), legend.justification = c(1,1), legend.title = element_blank())
)
cat("\n----------------------------------------------------------------------------------\n")
cat(">> Results << ")
cat("\n----------------------------------------------------------------------------------\n")
print.data.frame(DATA.print, print.gap = 2, digits = 4, row.names = F)
cat("\n----------------------------------------------------------------------------------\n")
cat(">> intersects << ")
cat("\n----------------------------------------------------------------------------------\n")
print.data.frame(intersect.results, row.names = F)
if(sum(abs(diff(above))) == 0) print("I could not find any intersects")
suppressMessages (print(p))
return(list(DATA.print, intersect.results))
}
cam_per_d0(OSLdata[, c("ED", "ED_Err", "Param2")], minD0 = seq(200, 400, 50), method = "ADM", sigma_m = 0.17)
cam_per_d0(OSLdata[, c("ED", "ED_Err", "Param2")], minD0 = seq(200, 400, 50), method = "ADM", sigma_m = 0.17, log = F)
cam_per_d0(OSLdata[, c("ED", "ED_Err", "Param2")], minD0 = seq(200, 400, 50), method = "CAM", sigma_m = 0.17, log = F)
library(devtools)
devtools::document()
# --------------------------------------------#
# ----------------   SETUP   ---------------- #
# ------------------------------------------- #
# set working directory
setwd("C:/Users/fhaba/Desktop")
# libraries
install.packages("devtools")
library(devtools)
# install and load my package
devtools::install_github("IMHarly/justapackage", force = TRUE)
